@{
    ViewBag.Title = "Testing Page";
}

<div id="Demo">

</div>

@section scripts{
    <script type="text/babel">
        //Life Cycle of React Component
         //mount
         //unmount
         class LifeCycle extends React.Component{
            constructor(props){
                super(props)
                console.log("constructor")
            }
            //unmount
            state = {
                opacity:0.5
            }

            death = ()=>{
                 console.log("death")
                 ReactDOM.unmountComponentAtNode(document.getElementById("Demo"))
                 console.log("death")
            }

            //只調一次 built-in 通過 LifeCycle instance call
            //組件完成掛載完畢調用
            componentDidMount(){
                console.log("componentDidMount")
                     this.timer = setInterval(()=>{
                            let {opacity} = this.state
                            opacity -= 0.1
                            if(opacity<=0){
                                opacity = 1
                            }
                            this.setState({opacity})
                        },200)
            }
            componentWillUnmount(){
                console.log("WillUnmount")
                //清除定時器
                clearInterval(this.timer)
            }
            //setState 的時候也會call render
            render (){
                  console.log("render")
                  return (
                         <div>
                             <h2 style={{opacity:this.state.opacity}}>React 學不會 怎麼辦</h2>
                             <button onClick={this.death}>Hell is waiting</button>
                         </div>
                  )
              }

          }
          ReactDOM.render(<LifeCycle/>,document.getElementById('Demo'))


    </script>
}